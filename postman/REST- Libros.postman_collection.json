{
	"info": {
		"_postman_id": "fcacb902-abaf-4260-8427-f9e1aacca661",
		"name": "REST: Libros",
		"description": "# ðŸš€Ejemplo de Libros para EPERS\n\nEjemplos de Requests que se le pueden hacer a nuestra aplicaciÃ³n Spring.\n\n## ðŸ”– Request disponibles\n\n#### **Guardar libro**\n\nPOST: [http://localhost:8080/libro](http://localhost:8080/libro)\n\nEjemplo de Body:\n\n```\n{\n\"titulo\" : \"Dune\",\n    \"autor\" : \"Frank Herbert\",\n    \"genero\" : \"Ciencia Ficcion\",\n    \"paginas\" : 704\n}\n\n ```\n\n#### **Recuperar todos los libros**\n\nGET: [http://localhost:8080/libro/todos](http://localhost:8080/libro/todos)\n\n#### **Recuperar los 5 libros mas largos**\n\nGET: [http://localhost:8080/libro/masLargos](http://localhost:8080/libro/masLargos)\n\n#### **Recuperar todos los libros de cierto genero**\n\nGET: [http://localhost:8080/libro/genero/terror](http://localhost:8080/libro/genero/terror)\n\n(ejemplo con el genero Terror)\n\n#### **Recuperar todos los libros de cierto autor**\n\nGET: [http://localhost:8080/libro/autor/stephenking](http://localhost:8080/libro/autor/stephenking)\n\n(ejemplo con el autor Sthepen King)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "4392605"
	},
	"item": [
		{
			"name": "Guardar libro",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"titulo\" : \"Dune\",\n    \"autor\" : \"Frank Herbert\",\n    \"genero\" : \"Ciencia Ficcion\",\n    \"paginas\" : 704\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:8080/libro",
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Todos los libros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/libro/todos",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Libros mas largos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/libro/masLargos",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Libros por genero",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/libro/genero/terror",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Libros por autor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "http://localhost:8080/libro/autor/stephenking",
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}